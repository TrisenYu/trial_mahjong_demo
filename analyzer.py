def content_analyzer(inpf: str):
    with open(inpf, 'r') as fd:
        while True:
            tmp = fd.readline()
            if tmp is None or len(tmp) <= 1:
                return
            yield tmp

def assigner(_arr: list[int]) -> list[int]:
    res = []
    for vv in _arr:
        if vv < 11:
            res.append(2)
        elif 10 <= vv < 21:
            res.append(1)
        elif 20 <= vv < 31:
            res.append(3)
        else:
            res.append(4)
    sorted(res)
    return res

def dumper(file_name: str) -> None:
    gset = set()
    bucket = {}
    for line in content_analyzer(file_name):
        split_pos = 0
        for idx, v in enumerate(line):
            if v == ':':
                split_pos = idx
                break
        # digital_val = int(line[:split_pos])
        determino = assigner([int(c) for c in line[split_pos + 2:][1:-2].split(', ')])
        sorted(determino)
        a = [_ for _ in filter(lambda x: x == 1, determino)]
        b = [_ for _ in filter(lambda x: x == 2, determino)]
        c = [_ for _ in filter(lambda x: x == 3, determino)]
        d = [_ for _ in filter(lambda x: x == 4, determino)]
        wrapped = (len(a), len(b), len(c), len(d))
        if wrapped in gset:
            bucket[wrapped] += 1
            continue
        gset.add(wrapped)
        bucket[wrapped] = 1

    print(len(gset))
    tot = 0
    for b in bucket:
        tot += bucket[b]
    for b in bucket:
        print(f'{b}: {bucket[b]}/{tot}')
    


dumper('0_to_1953125_as_num_distribution.txt')
# dumper("0_to_78125_as_char_dist.txt")

"""
78
(0, 1, 0, 0): 9/53440  
(0, 0, 1, 0): 9/53440  
(0, 0, 0, 1): 9/53440  
(0, 2, 0, 0): 36/53440 
(0, 1, 1, 0): 72/53440 
(0, 1, 0, 1): 72/53440 
(0, 0, 2, 0): 36/53440 
(0, 0, 1, 1): 72/53440 
(0, 0, 0, 2): 36/53440 
(1, 0, 0, 0): 7/53440  
(1, 1, 0, 0): 63/53440 
(1, 0, 1, 0): 63/53440 
(1, 2, 0, 0): 252/53440
(1, 1, 1, 0): 498/53440
(1, 0, 2, 0): 246/53440
(2, 0, 0, 0): 28/53440 
(0, 2, 1, 0): 252/53440
(2, 1, 0, 0): 246/53440
(0, 1, 2, 0): 252/53440
(0, 1, 1, 1): 504/53440
(2, 2, 0, 0): 960/53440
(3, 0, 0, 0): 84/53440
(1, 2, 1, 0): 1722/53440
(1, 1, 2, 0): 1680/53440
(4, 0, 0, 0): 210/53440
(1, 0, 0, 1): 42/53440
(1, 1, 0, 1): 330/53440
(1, 0, 1, 1): 330/53440
(2, 0, 1, 0): 214/53440
(2, 1, 1, 0): 1637/53440
(3, 1, 0, 0): 654/53440
(1, 1, 1, 1): 2238/53440
(2, 2, 1, 0): 5455/53440
(0, 3, 0, 0): 77/53440
(0, 2, 0, 1): 231/53440
(0, 1, 0, 2): 231/53440
(1, 3, 0, 0): 539/53440
(0, 3, 1, 0): 462/53440
(0, 2, 2, 0): 750/53440
(0, 2, 1, 1): 1386/53440
(2, 3, 0, 0): 2003/53440
(3, 0, 1, 0): 519/53440
(1, 3, 1, 0): 3123/53440
(1, 2, 2, 0): 4848/53440
(0, 0, 3, 0): 77/53440
(0, 0, 2, 1): 231/53440
(0, 0, 1, 2): 231/53440
(1, 0, 3, 0): 484/53440
(0, 1, 3, 0): 462/53440
(0, 1, 2, 1): 1374/53440
(3, 2, 0, 0): 2290/53440
(0, 0, 0, 3): 77/53440
(1, 2, 0, 1): 1042/53440
(1, 0, 2, 1): 978/53440
(2, 0, 0, 1): 116/53440
(2, 1, 0, 1): 874/53440
(0, 1, 1, 2): 1272/53440
(3, 0, 0, 1): 246/53440
(1, 0, 0, 2): 105/53440
(2, 0, 2, 0): 698/53440
(2, 0, 1, 1): 719/53440
(1, 1, 0, 2): 635/53440
(0, 4, 0, 0): 90/53440
(0, 3, 0, 1): 360/53440
(0, 2, 0, 2): 540/53440
(1, 4, 0, 0): 630/53440
(0, 4, 1, 0): 450/53440
(0, 3, 2, 0): 1125/53440
(0, 3, 1, 1): 1800/53440
(0, 2, 3, 0): 1120/53440
(1, 3, 0, 1): 1600/53440
(0, 0, 4, 0): 90/53440
(0, 0, 3, 1): 360/53440
(0, 5, 0, 0): 51/53440
(0, 4, 0, 1): 255/53440
(1, 5, 0, 0): 357/53440
(0, 5, 1, 0): 204/53440
(0, 6, 0, 0): 10/53440
"""